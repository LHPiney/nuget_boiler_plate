name: Build, Test, and Analyze with SonarCloud

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        dotnet-version: ['8.x']

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.x.x
            7.x.x
            8.x.x
            9.x.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Install dotnet-coverage
        run: dotnet tool install --global dotnet-coverage

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test
        run: |
          dotnet test --configuration Release --no-restore --collect:"XPlat Code Coverage" --results-directory ./TestResults
          echo "Test results directory contents:"
          ls -la ./TestResults

      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet tool install --global dotnet-sonarscanner
          export PATH="$PATH:/home/runner/.dotnet/tools"
          echo "Before SonarCloud scan, TestResults directory contents:"
          ls -la ./TestResults
          dotnet sonarscanner begin /k:"LHPiney_nuget_boiler_plate" /o:"lhpiney" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.cs.opencover.reportsPaths=./TestResults/coverage.opencover.xml
          dotnet build --configuration Release
          dotnet-coverage collect "dotnet test" -f opencover -o "./TestResults/coverage.opencover.xml"
          echo "After coverage collection, TestResults directory contents:"
          ls -la ./TestResults
          echo "Coverage report contents:"
          cat ./TestResults/coverage.opencover.xml
          dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Pack
        run: dotnet pack --configuration Release --no-restore --output ./nupkg

#      - name: Publish to NuGet
#        env:
#          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
#        run: dotnet nuget push ./nupkg/*.nupkg --api-key $NUGET_API_KEY --source https://api.nuget.org/v3/index.json