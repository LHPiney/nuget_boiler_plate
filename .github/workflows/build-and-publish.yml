name: Build, Analyze and Publish

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

env:
  SOLUTION_NAME: 'nuget-boiler-plate.sln'

jobs:
  analyze-and-build:
    name: Build and analyze
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET 6.0
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Setup .NET 7.0
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.x'

      - name: Setup .NET 8.0
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Setup .NET 9.0
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'
          
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Install SonarCloud scanner
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet tool install --global dotnet-coverage

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_NAME }}

      - name: Begin Sonar analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner begin \
            /k:"LHPiney_nuget_boiler_plate" \
            /o:"lhpiney" \
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml

      - name: Build
        run: dotnet build ${{ env.SOLUTION_NAME }} --configuration Release --no-restore

      - name: Test with coverage
        run: |
          dotnet-coverage collect 'dotnet test ${{ env.SOLUTION_NAME }} --no-build' -f xml -o 'coverage.xml'

      - name: End Sonar analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  publish-nuget:
    needs: analyze-and-build
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET 6.0
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Setup .NET 7.0
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.x'

      - name: Setup .NET 8.0
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Setup .NET 9.0
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_NAME }}

      - name: Build
        run: dotnet build ${{ env.SOLUTION_NAME }} --configuration Release --no-restore
  
      - name: Pack
        run: dotnet pack src/nuget-boiler-plate/nuget-boiler-plate.csproj --configuration Release --no-build --output nupkgs

    #  - name: Push to NuGet
    #    run: dotnet nuget push nupkgs/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
